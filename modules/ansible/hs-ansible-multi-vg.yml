- hosts: localhost
  gather_facts: false
  vars:
    hs_username: "{{ hsuser }}"
    hs_password: "{{ password }}"
    storage_volume_group_name: "{{ storage_volume_group_name | default(volume_group_name) | default('vg-storage') }}"
    storage_share_name: "{{ storage_share_name | default(share_name) | default('storage-share') }}"
    ecgroup_volume_group_name: "{{ ecgroup_volume_group_name | default(volume_group_name) | default('vg-ecgroup') }}"
    ecgroup_share_name: "{{ ecgroup_share_name | default(share_name) | default('ecgroup-share') }}"
    # Backward compatibility
    volume_group_name: "{{ volume_group_name | default('') }}"
    share_name: "{{ share_name | default('') }}"
    # Ensure storages is defined
    storages: "{{ storages | default([]) }}"

  tasks:
    # 1. Get nodes
    - name: Get all nodes (with retries)
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
        timeout: 30
      register: nodes_response
      until: nodes_response.status == 200
      retries: 60
      delay: 30
      notify: Node retrieval failed
      tags:
        - setup

    # 2. Get volume groups
    - name: Get all volume groups (with retries)
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/volume-groups"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
        timeout: 30
      register: volume_groups_response
      until: volume_groups_response.status == 200
      retries: 30
      delay: 10
      notify: Volume group retrieval failed
      tags:
        - setup

    # 3. Extract current node and volume group names
    - name: Extract existing node and volume group names
      set_fact:
        existing_node_names: "{{ nodes_response.json | map(attribute='name') | list }}"
        vg_names: "{{ volume_groups_response.json | map(attribute='name') | list }}"
      tags:
        - setup

    # 4. Determine which volume groups to create
    - name: Set volume group configurations
      set_fact:
        volume_groups_to_create: []
      tags:
        - volume_group_management

    - name: Add storage volume group if needed
      set_fact:
        volume_groups_to_create: "{{ volume_groups_to_create + [{'name': storage_volume_group_name, 'type': 'storage'}] }}"
      when: 
        - storage_volume_group_name != ''
        - storage_volume_group_name not in vg_names
        - storages | selectattr('nodeType', 'equalto', 'OTHER') | list | length > 0
      tags:
        - volume_group_management

    - name: Add ecgroup volume group if needed
      set_fact:
        volume_groups_to_create: "{{ volume_groups_to_create + [{'name': ecgroup_volume_group_name, 'type': 'ecgroup'}] }}"
      when:
        - ecgroup_volume_group_name != ''
        - ecgroup_volume_group_name not in vg_names
        - storages | selectattr('nodeType', 'equalto', 'ECGROUP') | list | length > 0
      tags:
        - volume_group_management

    # Fallback for backward compatibility
    - name: Add default volume group if no specific ones defined
      set_fact:
        volume_groups_to_create: "{{ volume_groups_to_create + [{'name': volume_group_name, 'type': 'all'}] }}"
      when:
        - volume_group_name != ''
        - volume_group_name not in vg_names
        - storage_volume_group_name == '' and ecgroup_volume_group_name == ''
        - storages | length > 0
      tags:
        - volume_group_management

    # Debug storages variable
    - name: Debug storages variable
      debug:
        msg: "Storages variable content: {{ storages | default([]) }}"
      tags:
        - debug
        - node_management

    # 5. Add missing nodes only
    - name: Add storage system if not present
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body: '{{ storage }}'
        force_basic_auth: yes
        status_code: 202
        body_format: json
        validate_certs: no
        timeout: 30
      loop: "{{ storages }}"
      loop_control:
        loop_var: storage
      when: 
        - storages | length > 0
        - storage.name not in existing_node_names
      register: node_add
      until: node_add.status == 202
      retries: 30
      delay: 10
      notify: Node addition failed
      tags:
        - node_management

    - name: Pause for storage system consistency
      pause:
        seconds: 10
      tags:
        - node_management

    - name: Wait until all expected nodes are present in API
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
        timeout: 30
      register: node_list_check
      until: >-
        storages | map(attribute='name') | list | difference(
          node_list_check.json
          | selectattr('nodeState', 'equalto', 'MANAGED')
          | selectattr('hwComponentState', 'equalto', 'OK')
          | map(attribute='name')
          | list
        ) | length == 0
      retries: 30
      delay: 10
      when: storages | length > 0
      tags:
        - node_management

    # 6. Create the volume groups
    - name: Create volume groups for different node types
      include_tasks: create_volume_group.yml
      loop: "{{ volume_groups_to_create }}"
      loop_control:
        loop_var: vg_config
      tags:
        - volume_group_management

    # 7. Process storage volumes
    - name: Get updated node list
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
        timeout: 30
      register: nodes_response_updated
      tags:
        - volume_management

    - name: Process storage server volumes
      include_tasks: process_volumes.yml
      vars:
        node_type: "OTHER"
        target_volume_group: "{{ storage_volume_group_name if storage_volume_group_name != '' else volume_group_name }}"
      when: storages | selectattr('nodeType', 'equalto', 'OTHER') | list | length > 0
      tags:
        - volume_management

    - name: Process ECGroup volumes
      include_tasks: process_volumes.yml
      vars:
        node_type: "ECGROUP"
        target_volume_group: "{{ ecgroup_volume_group_name if ecgroup_volume_group_name != '' else volume_group_name }}"
      when: storages | selectattr('nodeType', 'equalto', 'ECGROUP') | list | length > 0
      tags:
        - volume_management

    # 8. Create shares
    - name: Debug share variables
      debug:
        msg: 
          - "storage_share_name: {{ storage_share_name }}"
          - "ecgroup_share_name: {{ ecgroup_share_name }}"
          - "share_name: {{ share_name }}"
          - "share object defined: {{ share is defined }}"
      tags:
        - debug
        - share_management

    - name: Create storage share if defined
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/shares"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body:
          name: "{{ storage_share_name }}"
          path: "/{{ storage_share_name }}"
          _type: "SHARE"
          volumeGroup:
            name: "{{ storage_volume_group_name if storage_volume_group_name != '' else volume_group_name }}"
            _type: "VOLUME_GROUP"
          protocols:
            - NFS
          exportOptions:
            - subnet: "*"
              rootSquash: false
              accessPermissions: RW
          maxShareSize: 0
          alertThreshold: 90
        force_basic_auth: yes
        status_code: 202
        body_format: json
        validate_certs: no
        timeout: 30
      register: storage_share_result
      when:
        - storage_share_name != ''
        - storages | selectattr('nodeType', 'equalto', 'OTHER') | list | length > 0
      until: storage_share_result.status == 202
      retries: 30
      delay: 10
      tags:
        - share_management

    - name: Create ECGroup share if defined
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/shares"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body:
          name: "{{ ecgroup_share_name }}"
          path: "/{{ ecgroup_share_name }}"
          _type: "SHARE"
          volumeGroup:
            name: "{{ ecgroup_volume_group_name if ecgroup_volume_group_name != '' else volume_group_name }}"
            _type: "VOLUME_GROUP"
          protocols:
            - NFS
          exportOptions:
            - subnet: "*"
              rootSquash: false
              accessPermissions: RW
          maxShareSize: 0
          alertThreshold: 90
        force_basic_auth: yes
        status_code: 202
        body_format: json
        validate_certs: no
        timeout: 30
      register: ecgroup_share_result
      when:
        - ecgroup_share_name != ''
        - storages | selectattr('nodeType', 'equalto', 'ECGROUP') | list | length > 0
      until: ecgroup_share_result.status == 202
      retries: 30
      delay: 10
      tags:
        - share_management

    # Fallback for backward compatibility
    - name: Debug default share object
      debug:
        msg: "Default share object: {{ share | default({}) }}"
      when:
        - share is defined
        - storage_share_name == '' and ecgroup_share_name == ''
      tags:
        - debug
        - share_management

    - name: Create default share if defined (backward compatibility)
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/shares"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body: 
          name: "{{ share_name }}"
          path: "/{{ share_name }}"
          _type: "SHARE"
          volumeGroup:
            name: "{{ volume_group_name }}"
            _type: "VOLUME_GROUP"
          protocols:
            - NFS
          exportOptions:
            - subnet: "*"
              rootSquash: false
              accessPermissions: RW
          maxShareSize: 0
          alertThreshold: 90
        force_basic_auth: yes
        status_code: 202
        body_format: json
        validate_certs: no
        timeout: 30
      register: default_share_result
      when:
        - share_name is defined and share_name != ''
        - storage_share_name == '' 
        - ecgroup_share_name == ''
      until: default_share_result.status == 202
      retries: 30
      delay: 10
      tags:
        - share_management

  handlers:
    - name: Node retrieval failed
      fail:
        msg: "Failed to retrieve nodes from {{ data_cluster_mgmt_ip }}. Please check connectivity and credentials."
    - name: Volume group retrieval failed
      fail:
        msg: "Failed to retrieve volume groups from {{ data_cluster_mgmt_ip }}. Please check connectivity and credentials."
    - name: Node addition failed
      fail:
        msg: "One or more nodes failed to add. Review previous task output for details."

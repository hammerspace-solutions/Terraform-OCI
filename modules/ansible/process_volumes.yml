---
- name: Filter nodes with nodeType {{ node_type }}
  set_fact:
    filtered_nodes: "{{ nodes_response_updated.json | selectattr('nodeType', 'equalto', node_type) | list }}"

- name: Extract non-reserved logical volumes from {{ node_type }} nodes
  set_fact:
    non_reserved_volumes: >-
      {{
        filtered_nodes
        | map(attribute='platformServices')
        | flatten
        | selectattr('_type', 'equalto', 'LOGICAL_VOLUME')
        | selectattr('reserved', 'equalto', false)
        | list
      }}

- name: Display found non-reserved volumes for {{ node_type }}
  debug:
    msg: "Export Path: {{ item.exportPath }} | Node: {{ item.node.name }}"
  loop: "{{ non_reserved_volumes }}"
  loop_control:
    label: "{{ item.name }}"
  when: non_reserved_volumes is defined and non_reserved_volumes | length > 0

- name: Initialize volumes for addition
  set_fact:
    volumes_for_addition: []
  when: non_reserved_volumes is defined and non_reserved_volumes | length > 0

- name: Create volume variables for each non-reserved volume
  set_fact:
    volumes_for_addition: >-
      {{ volumes_for_addition + [{
        "name": item.node.name + "::" + item.exportPath,
        "logicalVolume": {
          "name": item.exportPath,
          "_type": "LOGICAL_VOLUME"
        },
        "node": {
          "name": item.node.name,
          "_type": "NODE"
        },
        "_type": "STORAGE_VOLUME",
        "accessType": "READ_WRITE",
        "storageCapabilities": {
          "performance": {
            "utilizationThreshold": 0.95,
            "utilizationEvacuationThreshold": 0.9
          }
        },
        "additionalAddresses": additional_ip_addresses.additionalAddresses | default([])
      }] }}
  loop: "{{ non_reserved_volumes }}"
  when: non_reserved_volumes is defined and non_reserved_volumes | length > 0

- name: Check for valid storage system before adding volumes
  uri:
    url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes/{{ item.node.name|urlencode }}"
    user: "{{ hsuser }}"
    password: "{{ password }}"
    method: GET
    body: ''
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    timeout: 30
  register: node_check_results
  until: node_check_results.status == 200
  retries: 30
  delay: 10
  loop: "{{ volumes_for_addition }}"
  loop_control:
    label: "{{ item.name }}"
  when: volumes_for_addition is defined and volumes_for_addition | length > 0

- name: Add the storage volumes to {{ target_volume_group }}
  uri:
    url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/storage-volumes?force=true&skipPerfTest=false&createPlacementObjectives=true&volumeGroup={{ target_volume_group | urlencode }}"
    user: "{{ hsuser }}"
    password: "{{ password }}"
    method: POST
    body: '{{ item }}'
    force_basic_auth: yes
    status_code: 202
    body_format: json
    validate_certs: no
    timeout: 30
  register: volume_add_results
  until: volume_add_results.status == 202
  retries: 30
  delay: 10
  failed_when:
    - volume_add_results.status == 500
  loop: "{{ volumes_for_addition }}"
  loop_control:
    label: "{{ item.name }}"
  when: volumes_for_addition is defined and volumes_for_addition | length > 0

- name: Check status of volume additions
  uri:
    url: "{{ item.location }}"
    user: "{{ hsuser }}"
    password: "{{ password }}"
    method: GET
    body: '{}'
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    timeout: 30
  register: volume_status_check
  until: volume_status_check.json.status == "COMPLETED"
  retries: 30
  delay: 20
  when: 
    - volume_add_results is defined
    - volume_add_results.results is defined
    - item.status == 202
  loop: "{{ volume_add_results.results | default([]) }}"
  loop_control:
    label: "{{ item.item.name }}"
